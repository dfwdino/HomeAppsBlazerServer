@page "/List-Car"
@using System.Linq
@using System.ComponentModel.DataAnnotations
@using HomeAppsBlazerServer.Models.Auto
@using HomeAppsBlazerServer.Servcies.Auto
@inject NavigationManager Navigation
@inject CarService CarService
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

@layout HomeAppsBlazerServer.Components.Layout.Cars.CarLayout

<PageTitle>Car List</PageTitle>

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">Cars</h2>
        <a href="/cars/add" class="btn btn-primary">
            <i class="bi bi-plus-circle me-1"></i> Add Car
        </a>
    </div>

    <!-- Search and Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Search</label>
                    <input type="text" class="form-control" placeholder="Search by name..." @bind-value="searchTerm" @oninput="OnSearch" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Sort By</label>
                    <select class="form-select" @bind="sortField" @bind:after="OnSortUpdate">
                        <option value="Name">Name</option>
                        <option value="DateAdded">Date Added</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">Order</label>
                    <select class="form-select" @bind="sortDirection" @bind:after="OnSortUpdate">
                        <option value="asc">Ascending</option>
                        <option value="desc">Descending</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Page Size</label>
                    <select class="form-select" @bind="pageSize" @bind:after="OnPageSizeChange">
                        <option value="10">10 per page</option>
                        <option value="25">25 per page</option>
                        <option value="50">50 per page</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @errorMessage
        </div>
    }
    else if (!filteredCars.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle-fill me-2"></i>
            No cars found.
        </div>
    }
    else
    {
        <!-- Car Table -->
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th class="px-3">ID</th>
                                <th>Name</th>
                                <th>Date Added</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var car in paginatedCars)
                            {
                                <tr>
                                    <td class="px-3">@car.CarID</td>
                                    <td>@car.Name</td>
                                    <td>@car.DateAdded.ToString("MMM dd, yyyy")</td>
                                    <td class="text-center">
                                        <a href="/cars/edit/@car.CarID" class="btn btn-sm btn-outline-primary me-1" title="Edit">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <button @onclick="() => DeleteCar(car)" class="btn btn-sm btn-outline-danger" title="Delete">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Pagination -->
        <nav aria-label="Car list pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                        <i class="bi bi-chevron-left"></i>
                    </button>
                </li>

                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                        <button class="page-link" @onclick="() => GoToPage(pageNumber)">
                            @pageNumber
                        </button>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                        <i class="bi bi-chevron-right"></i>
                    </button>
                </li>
            </ul>
        </nav>

        <!-- Summary -->
        <p class="text-muted text-center mb-4">
            Showing @(((currentPage - 1) * pageSize) + 1) to @Math.Min(currentPage * pageSize, filteredCars.Count()) of @filteredCars.Count() cars
        </p>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (carToDelete != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete <strong>@carToDelete.Name</strong>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        @if (deleting)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Car> cars = new();
    private IEnumerable<Car> filteredCars => GetFilteredCars();
    private IEnumerable<Car> paginatedCars => GetPaginatedCars();

    private bool loading = true;
    private string? errorMessage;
    private string searchTerm = string.Empty;
    private string sortField = "Name";
    private string sortDirection = "asc";
    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages => Math.Max(1, (int)Math.Ceiling((double)filteredCars.Count() / pageSize));

    private Car? carToDelete;
    private bool deleting;

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            loading = true;
            cars = (await CarService.GetAllAsync()).ToList();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cars: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private IEnumerable<Car> GetFilteredCars()
    {
        IEnumerable<Car> query = cars;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        query = sortField switch
        {
            "Name" => sortDirection == "asc"
                ? query.OrderBy(c => c.Name)
                : query.OrderByDescending(c => c.Name),
            "DateAdded" => sortDirection == "asc"
                ? query.OrderBy(c => c.DateAdded)
                : query.OrderByDescending(c => c.DateAdded),
            _ => query
        };

        return query;
    }

    private IEnumerable<Car> GetPaginatedCars()
    {
        return filteredCars
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);
    }

    private void OnSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1; // Reset to first page when searching
    }

    private void OnSortUpdate()
    {
        currentPage = 1; // Reset to first page when sorting changes
    }

    private void OnPageSizeChange()
    {
        currentPage = 1; // Reset to first page when page size changes
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void DeleteCar(Car car)
    {
        carToDelete = car;
    }

    private void CancelDelete()
    {
        carToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (carToDelete == null) return;

        try
        {
            deleting = true;
            await CarService.DeleteAsync(carToDelete.CarID);
            await LoadCars();
            carToDelete = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting car: {ex.Message}";
        }
        finally
        {
            deleting = false;
        }
    }
}