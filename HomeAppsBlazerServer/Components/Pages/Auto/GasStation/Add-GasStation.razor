@page "/Add-GasStation"
@page "/Add-GasStation/{StationId:int}"
@using System.Linq
@using System.ComponentModel.DataAnnotations
@using HomeAppsBlazerServer.Servcies.Auto
@using HomeAppsBlazerServer.Models.Auto
@inject NavigationManager Navigation
@inject IGasStationService GasStationService
@rendermode @(new InteractiveServerRenderMode(false))
@attribute [StreamRendering]

@layout HomeAppsBlazerServer.Components.Layout.Cars.CarLayout


<PageTitle>@(IsEdit ? "Edit Gas Station" : "Add Gas Station")</PageTitle>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">@(IsEdit ? "Edit Gas Station" : "Add Gas Station")</h3>
                </div>
                
                <div class="card-body p-4">
                    <EditForm Model="@Station" OnValidSubmit="@HandleValidSubmit" FormName="gasStationForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />
                        
                        <!-- Station Name -->
                        <div class="mb-3">
                            <label class="form-label" for="name">Station Name <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Station.Name" 
                                      class="form-control" 
                                      id="name"
                                      placeholder="Enter station name"
                                      maxlength="100" />
                            <ValidationMessage For="@(() => Station.Name)" class="text-danger small" />
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-flex justify-content-between mt-4 pt-3 border-top">
                            <button type="button" 
                                    class="btn btn-outline-secondary px-4" 
                                    @onclick="Cancel">
                                Cancel
                            </button>
                            <button type="submit" 
                                    class="btn btn-primary px-4" 
                                    disabled="@(Processing)">
                                @if (Processing)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <i class="bi @(IsEdit ? "bi-check-circle" : "bi-plus-circle") me-1"></i>
                                    @(IsEdit ? "Update Station" : "Add Station")
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <!-- Error Alert -->
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @ErrorMessage
                </div>
            }

            <!-- Success Alert -->
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success mt-3" role="alert">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    @SuccessMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? StationId { get; set; }

    [SupplyParameterFromForm]
    public GasStation Station { get; set; } = new();

    private bool Processing { get; set; }
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }
    private bool IsEdit => StationId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            await LoadStation();
        }
    }

    private async Task LoadStation()
    {
        try
        {
            var station = await GasStationService.GetByIdAsync(StationId!.Value);
            if (station == null)
            {
                ErrorMessage = "Gas station not found.";
                return;
            }

            Station = new GasStation
            {
                StationID = station.StationID,
                Name = station.Name               
            };
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading gas station: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Processing = true;
            ErrorMessage = null;
            SuccessMessage = null;

            if (IsEdit)
            {
                await GasStationService.UpdateAsync(new GasStation
                {
                    StationID = Station.StationID,
                    Name = Station.Name
                });
                SuccessMessage = "Gas station updated successfully!";
            }
            else
            {
                await GasStationService.CreateAsync(new GasStation
                {
                    Name = Station.Name
                });
                SuccessMessage = "Gas station added successfully!";
            }

            // Optional: Navigate back to the list after a delay
            await Task.Delay(1500);
            Navigation.NavigateTo("/GasStationList");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error {(IsEdit ? "updating" : "adding")} gas station: {ex.Message}";
        }
        finally
        {
            Processing = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/GasStationList");
    }
}