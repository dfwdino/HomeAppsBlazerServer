@page "/ShoppingList"


@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Shopping

@*Endalbes it*@
@* @rendermode InteractiveServer *@

@* jackes up the view of the table *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@* Loads as it as it download it. *@
@attribute [StreamRendering]

@inject IShoppingServices ShoppingServices

@inject NavigationManager NavigationManger
@inject IJSRuntime JsRuntime

@layout HomeAppsBlazerServer.Components.Layout.Shopping.ShoppingLayout

<PageTitle>Shopping List</PageTitle>
<h3>Shopping Items</h3>


<div onclick="document.querySelector('.navbar-toggler').click()">
    <NavLink  class="link-primary" href="ShoppingItems" style="padding-right:35px">
        <span aria-hidden="true">All Items</span>
    </NavLink>


    <NavLink href="CreateEditListItem" style="padding-right:35px">
        <span class="link-primary" aria-hidden="true">Add Item to List</span>
    </NavLink>

    <NavLink href="edit-item">
        <span class="link-primary" aria-hidden="true">Add New Item</span>
    </NavLink>

</div>

<div style="padding-top:20px" />



@if(CurrentShoppingList is null)
{
     <p><em>Loadding List Items....</em></p>
}
else if (CurrentShoppingList.Count.Equals(0))
{
    <p><em>Did not find any items</em></p>
}
else
{

    <div class="container">
        <!-- Headers Row -->
        <div class="row border-bottom py-2 fw-bold">
            <div class="col-md-10">Item Name</div>
            <div class="col-md-2"></div>
        </div>

        <!-- Data Rows -->
        @foreach (var item in CurrentShoppingList)
        {
            <div class="row border-bottom py-2" id="@item.ShoppingItemListID">
                <div class="col-10">
                    <span class="link-primary" @onclick="@(() => GotItem(item.ShoppingItemListID))">
                        @item.ItemName
                    </span>
                    @if (item.NumberOfItems.HasValue)
                    {
                        <span> - @item.NumberOfItems</span>
                    }
                    @if (item.Price.HasValue && item.Price.Value > 0)
                    {
                        <span @onclick="@(() => ShowHistory(item.ItemID))"> $@item.Price</span>
                    }
                    @if (item.storename != null)
                    {
                        <span> - @item.storename</span>
                    }
                </div>
                <div class="col-2">
                    <span class="link-primary" @onclick="@(() => EditItem(item.ShoppingItemListID))">
                        Update
                    </span>
                </div>
            </div>
        }
    </div>

}

  <PriceHistoryOverview @ref="popupRef" />


@code {
    List<ShoppingItemResult> CurrentShoppingList;

     private PriceHistoryOverview popupRef;

    private void ShowHistory(int id)
    {
        
       List<PriceHistory> ItemPriceHistory =  ShoppingServices.GetPriceHisotry(id).Result;

        popupRef.Show(ItemPriceHistory);
    }


    protected override async Task OnInitializedAsync()
    {
        CurrentShoppingList = await GetShoppingItems();

    }


    async Task<List<ShoppingItemResult>> GetShoppingItems()
    {
        return await ShoppingServices.GetAllNeedItemsAsync();
    }

    void EditItem(int id)
    {
        NavigationManger.NavigateTo($"CreateEditListItem/{id}");
    }

    async Task GotItem(int id)
    {
        await ShoppingServices.GotItem((int)id);
        CurrentShoppingList.Remove(CurrentShoppingList.First(m => m.ShoppingItemListID == id));
        //await JsRuntime.InvokeVoidAsync("alert", "Item Added");

    }


}
