@page "/ShoppingList"


@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Shopping
@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Shopping

@*Endalbes it*@
@* @rendermode InteractiveServer *@

@* jackes up the view of the table *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@* Loads as it as it download it. *@
@attribute [StreamRendering]

@inject IShoppingServices ShoppingServices

@inject NavigationManager NavigationManger
@inject IJSRuntime JsRuntime

@layout HomeAppsBlazerServer.Components.Layout.Shopping.ShoppingLayout

<PageTitle>Shopping List</PageTitle>
<h3>Shopping Items</h3>


<!-- Main Navigation -->
<div class="shopping-nav card mb-4">
    <div class="card-body p-3">
        <nav class="nav nav-pills">
            <NavLink class="nav-link" href="ShoppingItems" Match="NavLinkMatch.All">
                <i class="bi bi-grid me-1"></i> All Items
            </NavLink>
            <NavLink class="nav-link" href="CreateEditListItem">
                <i class="bi bi-plus-circle me-1"></i> Add Item to List
            </NavLink>
            <NavLink class="nav-link" href="edit-item">
                <i class="bi bi-file-earmark-plus me-1"></i> Add New Item
            </NavLink>
        </nav>
    </div>
</div>

<!-- Shopping List Content -->
<div class="shopping-list-container">
    @if (CurrentShoppingList is null)
    {
        <div class="alert alert-info">
            <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span>Loading list items...</span>
            </div>
        </div>
    }
    else if (CurrentShoppingList.Count.Equals(0))
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle me-2"></i>
            No items found in the list.
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Shopping List</h5>
                    <span class="badge bg-primary">@CurrentShoppingList.Count items</span>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Item Details</th>
                                <th class="text-end" style="width: 100px">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in CurrentShoppingList)
                            {
                                <tr id="@item.ShoppingItemListID">
                                    <td>
                                        <div class="d-flex flex-column flex-md-row align-items-md-center">
                                            <span class="fw-bold me-md-2" style="cursor: pointer" @onclick="@(() => GotItem(item.ShoppingItemListID))">
                                                @item.ItemName
                                            </span>

                                            <div class="item-details d-flex flex-wrap align-items-center mt-1 mt-md-0">
                                                @if (item.NumberOfItems.HasValue)
                                                {
                                                    <span class="badge bg-secondary me-2">
                                                        <i class="bi bi-123 me-1"></i>@item.NumberOfItems
                                                    </span>
                                                }

                                                @if (item.Price.HasValue && item.Price.Value > 0)
                                                {
                                                    <span class="badge bg-success me-2" style="cursor: pointer" @onclick="@(() => ShowHistory(item.ItemID))">
                                                        <i class="bi bi-currency-dollar me-1"></i>@item.Price
                                                    </span>
                                                }

                                                @if (item.storename != null)
                                                {
                                                    <span class="badge bg-info text-dark me-2">
                                                        <i class="bi bi-shop me-1"></i>@item.storename
                                                    </span>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => EditItem(item.ShoppingItemListID))">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<PriceHistoryOverview @ref="popupRef" />

<!-- Add these styles to your component or stylesheet -->
<style>
    .shopping-nav .nav-link {
        color: #4a5568;
        border-radius: 0.375rem;
        transition: all 0.2s ease;
    }

        .shopping-nav .nav-link:hover {
            background-color: #e2e8f0;
        }

        .shopping-nav .nav-link.active {
            background-color: #3182ce;
            color: white;
        }

    .shopping-list-container {
        max-width: 1100px;
        margin: 0 auto;
    }

    .item-details {
        font-size: 0.9rem;
    }

    @@media (max-width: 768px) {
        .item-details {
            margin-top: 0.25rem;
        }
    }
</style>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">


@code {
    List<ShoppingItemResult> CurrentShoppingList;

     private PriceHistoryOverview popupRef;

    private void ShowHistory(int id)
    {
        
       List<PriceHistory> ItemPriceHistory =  ShoppingServices.GetPriceHisotry(id).Result;

        popupRef.Show(ItemPriceHistory);
    }


    protected override async Task OnInitializedAsync()
    {
        CurrentShoppingList = await GetShoppingItems();

    }


    async Task<List<ShoppingItemResult>> GetShoppingItems()
    {
        return await ShoppingServices.GetAllNeedItemsAsync();
    }

    void EditItem(int id)
    {
        NavigationManger.NavigateTo($"CreateEditListItem/{id}");
    }

    async Task GotItem(int id)
    {
        await ShoppingServices.GotItem((int)id);
        CurrentShoppingList.Remove(CurrentShoppingList.First(m => m.ShoppingItemListID == id));
        //await JsRuntime.InvokeVoidAsync("alert", "Item Added");

    }


}
