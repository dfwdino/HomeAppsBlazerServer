@page "/edit-item"
@page "/edit-item/{Id:int}"

@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Servcies
@using Microsoft.AspNetCore.Mvc

@inject IShoppingServices ShoppingServices
@inject NavigationManager NavigationManger

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.ShoppingLayout

@if (Id is null)
{
    <h3>Add Item</h3>
    <div style="padding-bottom:10px" />
}
else
{
    <h3>Update @CurrentShoppingitems.ItemName item</h3>
}


<EditForm Model="CurrentShoppingitems" OnSubmit="HandleSubmit" >

    <div>
        <label for="itemsname">Items Name:</label>
        <InputText id="itemsname" @bind-Value="@CurrentShoppingitems.ItemName"  />
    </div>

    <div style="padding-bottom:10px" />
    
    <div>
        <label for="IsGlutenFree">Gluten Free:</label>
        <InputCheckbox id="IsGlutenFree" @bind-Value="@CurrentShoppingitems.IsGlutenFree"/>
    </div>

    <div style="padding-bottom:10px" />

    <div>
        <div>
            <label for="KidsDontLike">Kids Dont Like:</label>
            <InputCheckbox id="KidsDontLike" @bind-Value="@CurrentShoppingitems.KidsDontLike" />
        </div>
    </div>

    <div style="padding-bottom:10px" />

    <div>
        <div>
            <label for="FreddyDontLike">Freddy Dont Like:</label>
            <InputCheckbox id="FreddyDontLike" @bind-Value="@CurrentShoppingitems.FreddyDontLike" />
        </div>
    </div>

    <div style="padding-bottom:10px" />

    <div>
        <div>
            <label for="ElliottDontLike">Elliott Dont Like:</label>
            <InputCheckbox id="ElliottDontLike" @bind-Value="@CurrentShoppingitems.ElliottDontLike"/>
        </div>
    </div>

    <div style="padding-bottom:20px"/>

    <button type="submit" class="btn btn-primary">Submit</button>

    <button class="btn btn-primary" @onclick="@(() => Deleteitems())">Delete</button>


</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    public ShoppingItem CurrentShoppingitems { get; set; } = new() { ItemName = string.Empty };


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var shoppingitems = await ShoppingServices.GetShoppingItemByIDAsync((int)(Id));

            if (shoppingitems is not null)
            {
                CurrentShoppingitems = shoppingitems;
            }
        }

    }

    [HttpPost]
    //not working
    async Task Deleteitems()
    {
        //delete
        await ShoppingServices.RemoveShoppingItem((int)Id);

        NavigationManger.NavigateTo($"/Shoppingitemss/");
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            //update
            await ShoppingServices.UpdateShoppingItem(CurrentShoppingitems, (int)Id);
            NavigationManger.NavigateTo($"/Shoppingitems/");
        }
        else
        {
            //add
            await ShoppingServices.AddShoppingItemAsyn(CurrentShoppingitems);
            NavigationManger.NavigateTo($"/Shoppingitemss/");
        }

       

    }

}
