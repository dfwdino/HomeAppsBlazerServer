@page "/edit-item"
@page "/edit-item/{Id:int}"

@using System.ComponentModel.DataAnnotations
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Shopping
@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Shopping
@using Microsoft.AspNetCore.Mvc

@inject IShoppingServices ShoppingServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer
@layout HomeAppsBlazerServer.Components.Layout.Shopping.ShoppingLayout

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
<link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<!-- Add chart.js reference if chart components are used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add sortable.js reference if SortableList component is used in your application. -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>




<EditForm Model="CurrentShoppingitems" OnSubmit="HandleSubmit">
    <div class="container">
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white">
                

                @if (Id is null)
                {
                    <h5 class="mb-0">Add New Item</h5>
             
                }
                else
                {
                    <h5 class="mb-0">Update @CurrentShoppingitems.ItemName</h5>
                }
            </div>
            <div class="card-body">
                <div class="row mb-3 align-items-center">
                    <div class="col-md-3">
                        <label for="itemsname" class="form-label mb-0">Item Name:</label>
                    </div>
                    <div class="col-md-6">
                        <InputText id="itemsname" @bind-Value="@CurrentShoppingitems.ItemName" class="form-control" />
                    </div>
                </div>

                <div class="row mb-3 align-items-center">
                    <div class="col-md-3">
                        <label for="storeName" class="form-label mb-0">Store:</label>
                    </div>
                    <div class="col-md-6">
                        <BlazorBootstrap.AutoComplete @bind-Value="StoreName"
                                                      TItem="ShoppingStore"
                                                      DataProvider="CustomersDataProvider"
                                                      PropertyName="StoreName"
                                                      Placeholder="Search for a store..."
                                                      OnChanged="(ShoppingStore store) => OnAutoCompleteChanged(store)"
                                                      class="form-control" />
                    </div>
                </div>

                <hr class="my-4">

                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h6 class="mb-0">Dietary & Preferences</h6>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3 align-items-center">
                            <div class="col-md-3">
                                <label for="IsGlutenFree" class="form-label mb-0">Gluten Free:</label>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <InputCheckbox id="IsGlutenFree" @bind-Value="@CurrentShoppingitems.IsGlutenFree" class="form-check-input" />
                                    <label class="form-check-label" for="IsGlutenFree">Yes</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3 align-items-center">
                            <div class="col-md-3">
                                <label for="KidsDontLike" class="form-label mb-0">Kids Don't Like:</label>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <InputCheckbox id="KidsDontLike" @bind-Value="@CurrentShoppingitems.KidsDontLike" class="form-check-input" />
                                    <label class="form-check-label" for="KidsDontLike">Yes</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3 align-items-center">
                            <div class="col-md-3">
                                <label for="FreddyDontLike" class="form-label mb-0">Freddy Doesn't Like:</label>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <InputCheckbox id="FreddyDontLike" @bind-Value="@CurrentShoppingitems.FreddyDontLike" class="form-check-input" />
                                    <label class="form-check-label" for="FreddyDontLike">Yes</label>
                                </div>
                            </div>
                        </div>

                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <label for="ElliottDontLike" class="form-label mb-0">Elliott Doesn't Like:</label>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    <InputCheckbox id="ElliottDontLike" @bind-Value="@CurrentShoppingitems.ElliottDontLike" class="form-check-input" />
                                    <label class="form-check-label" for="ElliottDontLike">Yes</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-footer bg-light">
                <div class="row">
                    <div class="col-12 d-flex gap-2">
                        <button type="button" class="btn btn-outline-secondary" @onclick="@(() => Cancel())">
                            <i class="bi bi-x-circle me-1"></i> Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-1"></i> Submit
                        </button>
                        @if (Id is not null)
                        {
                            <button type="button" class="btn btn-danger ms-auto" @onclick="@(() => Deleteitems())">
                                <i class="bi bi-trash me-1"></i> Delete
                            </button>
                        }
                        else
                        {
                            <div class="ms-auto"></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<!-- Add this to your _Imports.razor or component -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">


@code {
    [Parameter]
    public int? Id { get; set; }

    public string StoreName { get; set; } = string.Empty;
    public string ItemName { get; set; } = string.Empty;

    public ShoppingItem CurrentShoppingitems { get; set; } = new() { ItemName = string.Empty };




    private async Task<AutoCompleteDataProviderResult<ShoppingStore>> CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<ShoppingStore> request)
    {
        var customers = await ShoppingServices.GetShoppingStoresAsync(request.Filter.Value); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<ShoppingStore> { Data = customers, TotalCount = customers.Count() });
    }

    private async Task<AutoCompleteDataProviderResult<ShoppingItem>> CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<ShoppingItem> request)
    {
        var customers = await ShoppingServices.GetShoppingItemsFilterAsync(request.Filter.Value); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<ShoppingItem> { Data = customers, TotalCount = customers.Count() });
    }

    private void OnAutoCompleteChanged(ShoppingItem item)
    {
        if (item != null)
        {    CurrentShoppingitems.ShoppingItemID = item.ShoppingItemID;

            CurrentShoppingitems.ItemName = item.ItemName;
        }

        //StateHasChanged();
    }



    private void OnAutoCompleteChanged(ShoppingStore customer)
    {
        if (customer != null)
            CurrentShoppingitems.StoreID = customer.ShoppingStoreID;
       
        //StateHasChanged();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var shoppingitems = await ShoppingServices.GetShoppingItemByIDAsync((int)(Id));

            if (shoppingitems is not null)
            {
                CurrentShoppingitems = shoppingitems;
                //StoreName = CurrentShoppingitems.StoreName;
                
            }
            ///Need to fix when null
        }

    }

    [HttpPost]
    //not working
    async Task Deleteitems()
    {
        //delete
        await ShoppingServices.RemoveShoppingItem((int)Id);

        NavigationManager.NavigateTo($"ShoppingItems/");
    }

    [HttpPost]

    async Task Cancel()
    {

        NavigationManager.NavigateTo($"Shoppingitems/");
    }

    async Task HandleSubmit()
    {
        if (CurrentShoppingitems.ItemName.Length.Equals(0))
        {
            return;
        }
        else if (Id is not null) //update
        {
            
            await ShoppingServices.UpdateShoppingItem(CurrentShoppingitems, (int)Id);
            NavigationManager.NavigateTo($"Shoppingitems/");
        }
        else //add
        {   
            await ShoppingServices.AddShoppingItemAsyn(CurrentShoppingitems);
            
            CurrentShoppingitems = new();

            //NavigationManager.NavigateTo($"ShoppingItems/");
        }



    }

}

<style>
    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }

    .row{
        padding-bottom:5px;
      }

    label{
        font-weight:bold;
    }
</style>