@page "/edit-item"
@page "/edit-item/{Id:int}"

@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Servcies
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations

@inject IShoppingServices ShoppingServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.ShoppingLayout

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" />
<link href="_content/Blazor.Bootstrap/blazor.bootstrap.css" rel="stylesheet" />

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<!-- Add chart.js reference if chart components are used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.0.1/chart.umd.js" integrity="sha512-gQhCDsnnnUfaRzD8k1L5llCCV6O9HN09zClIzzeJ8OJ9MpGmIlCxm+pdCkqTwqJ4JcjbojFr79rl2F1mzcoLMQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add chartjs-plugin-datalabels.min.js reference if chart components with data label feature is used in your application. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-datalabels/2.2.0/chartjs-plugin-datalabels.min.js" integrity="sha512-JPcRR8yFa8mmCsfrw4TNte1ZvF1e3+1SdGMslZvmrzDYxS69J7J49vkFL8u6u8PlPJK+H3voElBtUCzaXj+6ig==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- Add sortable.js reference if SortableList component is used in your application. -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="_content/Blazor.Bootstrap/blazor.bootstrap.js"></script>



@if (Id is null)
{
    <h3>Add Item</h3>
    <div style="padding-bottom:10px" />
}
else
{
    <h3>Update @CurrentShoppingitems.ItemName item</h3>
}


<EditForm Model="CurrentShoppingitems" OnSubmit="HandleSubmit">


    <div class="row">

        <div class="col-lg-2">
            <label for="itemsname">Items Name:</label>
        </div>
        <div class="col-lg-2">
            <InputText id="itemsname" @bind-Value="@CurrentShoppingitems.ItemName" />
        </div>
    </div>

    <div class="row">
        <div class="col-lg-2">
            <label>Store:</label>
        </div>
        <div class="col-lg-2">
            <BlazorBootstrap.AutoComplete @bind-Value="StoreName"
                                          TItem="ShoppingStore"
                                          DataProvider="CustomersDataProvider"
                                          PropertyName="StoreName"
                                          Placeholder="Search a store..."
                                          OnChanged="(ShoppingStore store) => OnAutoCompleteChanged(store)" />
        </div>
    </div>



 @*    <div class="row">
        <div class="col-lg-2">
            <label for="price">Price:</label>
        </div>
        <div class="col-lg-2">
            <InputNumber id="price" @bind-Value="@CurrentShoppingitems.Price" type='number' step='0.01' />
        </div>
    </div> *@


    <div class="row">
        <div class="col-lg-2">
            <label style="width:130px" for="IsGlutenFree">Gluten Free:</label>
        </div>
        <div class="col-lg-2">
            <InputCheckbox id="IsGlutenFree" @bind-Value="@CurrentShoppingitems.IsGlutenFree" />
        </div>
    </div>



    <div class="row">
        <div class="col-lg-2">
            <label style="width:130px" for="KidsDontLike">Kids Dont Like:</label>
        </div>
        <div class="col-lg-3">
            <InputCheckbox id="KidsDontLike" @bind-Value="@CurrentShoppingitems.KidsDontLike" />
        </div>
    </div>


    <div class="row">
        <div class="col-lg-2">
            <label style="width:130px" for="FreddyDontLike">Freddy Dont Like:</label>
        </div>
        <div class="col-lg-2">
            <InputCheckbox id="FreddyDontLike" @bind-Value="@CurrentShoppingitems.FreddyDontLike" />
        </div>
    </div>



    <div class="row">
        <div class="col-lg-2">
            <label style="width:130px" for="ElliottDontLike">Elliott Dont Like:</label>
        </div>
        <div class="col-lg-2">
            <InputCheckbox id="ElliottDontLike" @bind-Value="@CurrentShoppingitems.ElliottDontLike" />
        </div>
    </div>


    <div class="row">
        <div class="col-lg-1">
            <button class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
        </div>
        <div class="col-lg-1">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
        <div class="col-lg-1">
            <button class="btn btn-primary" @onclick="@(() => Deleteitems())">Delete</button>
        </div>
    </div>

</EditForm>



@code {
    [Parameter]
    public int? Id { get; set; }

    public string StoreName;

    public ShoppingItem CurrentShoppingitems { get; set; } = new() { ItemName = string.Empty };



    private async Task<AutoCompleteDataProviderResult<ShoppingStore>> CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<ShoppingStore> request)
    {
        var customers = await ShoppingServices.GetShoppingStoresAsync(request.Filter.Value); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<ShoppingStore> { Data = customers, TotalCount = customers.Count() });


    }


    private void OnAutoCompleteChanged(ShoppingStore customer)
    {
        CurrentShoppingitems.StoreID = customer.ShoppingStoreID;
        //Console.WriteLine($"'{customer?.StoreName}' selected.");
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var shoppingitems = await ShoppingServices.GetShoppingItemByIDAsync((int)(Id));

            if (shoppingitems is not null)
            {
                CurrentShoppingitems = shoppingitems;
            }
            ///Need to fix when null
        }

    }

    [HttpPost]
    //not working
    async Task Deleteitems()
    {
        //delete
        await ShoppingServices.RemoveShoppingItem((int)Id);

        NavigationManager.NavigateTo($"ShoppingItems/");
    }

    [HttpPost]

    async Task Cancel()
    {

        NavigationManager.NavigateTo($"Shoppingitems/");
    }

    async Task HandleSubmit()
    {
        if (Id is not null)
        {
            //update
            await ShoppingServices.UpdateShoppingItem(CurrentShoppingitems, (int)Id);
            NavigationManager.NavigateTo($"Shoppingitems/");
        }
        else if (CurrentShoppingitems.ItemName.Length.Equals(0))
        {
            return;
        }
        else
        {
            //add
            await ShoppingServices.AddShoppingItemAsyn(CurrentShoppingitems);
            NavigationManager.NavigateTo($"ShoppingItems/");
        }



    }

}

<style>
    .valid.modified:not([type=checkbox]) {
        outline: 1px solid #26b050;
    }

    .invalid {
        outline: 1px solid red;
    }

    .validation-message {
        color: red;
    }
</style>