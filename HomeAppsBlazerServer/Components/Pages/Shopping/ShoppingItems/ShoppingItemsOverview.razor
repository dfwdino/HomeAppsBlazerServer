@page "/ShoppingItems"
@page "/ShoppingItems/{showallitems:bool}"

@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Interface
@using HomeAppsBlazerServer.Servcies

@*Endalbes it*@
@rendermode InteractiveServer

@* jackes up the view of the table *@
@* @rendermode @(new InteractiveServerRenderMode(prerender: false))  *@


@* Loads as it as it download it. *@
@attribute [StreamRendering]

@inject IShoppingServices ShoppingServices

@inject NavigationManager NavigationManger
@inject IJSRuntime JsRuntime

@layout HomeAppsBlazerServer.Components.Layout.ShoppingLayout

@if (_showallitems == false)
{
    <PageTitle>Shopping Items</PageTitle>
    <h3>Not on List Items</h3>

    <span class="link-primary" @onclick="@(() => GetShoppingItems(@_showallitems))">Show All</span>
}
else
{
    <PageTitle>Shopping Items</PageTitle>
    <h3>All Items</h3>

    <span class="link-primary" @onclick="@(() => GetShoppingItems(@_showallitems))">Show Not on List</span>
}

@if (AllShoppingItems is null)
{
    <p><em>Loadding Stores....</em></p>
}
else if (AllShoppingItems.Count.Equals(0))
{
    <p><em>Did not find any items</em></p>
}
else
{

    <table class="table">
        <thead>
        <th>Item Name</th>
        <th>Dislike</th>
        <th>Price</th>
        <th>Delete</th>
        </thead>
        <tbody>
            @foreach (var item in AllShoppingItems)
            {
                <tr id="@item.ShoppingItemID">
                    <td>
                        <span class="link-primary" @onclick="@(() => EditItem(item.ShoppingItemID))"> @item.ItemName </span> -
                        <span class="link-primary" @onclick="@(() => AddItemToList(item.ShoppingItemID))"> Need</span>
                    </td>

                    <td>
                        @if (item.ElliottDontLike == true)
                        {
                            <span class='strike'>Elliott</span>
                        }
                        @if (item.FreddyDontLike == true)
                        {
                            <span class='strike'>Freddy</span>
                        }
                        @if (item.KidsDontLike == true)
                        {
                            <span class='strike'>Kids</span>
                        }
                    </td>

                    <td @onclick="@(() => ShowHistory(item.ShoppingItemID))">@item.Price</td>
                    <td>
                        @* <button class="btn btn-primary" @onclick="@(() => EditItem(item.ShoppingItemID))">Edit Item</button> *@
                        <button class="btn btn-primary" @onclick="@(() => DeleteItem(item.ShoppingItemID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="AddItem">Add Item</button>

    <PriceHistoryOverview @ref="popupRef" />

}




@code {

    private PriceHistoryOverview popupRef;

    List<ShoppingItem> AllShoppingItems;
    private bool _showallitems = false;

    [Parameter]
    public bool showallitems { get; set; } = false;

    private void ShowHistory(int id)
    {
        List<PriceHistory> ItemPriceHistory = ShoppingServices.GetPriceHisotry(id).Result;

        popupRef.Show(ItemPriceHistory);
    }


    protected override async Task OnInitializedAsync()
    {

        await GetShoppingItems(showallitems);

    }


    async Task GetShoppingItems(bool showallitems = false)
    {   
        AllShoppingItems = await ShoppingServices.GetShoppingItemsAsync(showallitems);

        _showallitems = !showallitems;
    }

    void EditItem(int id)
    {
        NavigationManger.NavigateTo($"edit-item/{id}");
    }



    void AddItem()
    {
        NavigationManger.NavigateTo($"edit-item/");
    }

    async Task AddItemToList(int id)
    {
        await ShoppingServices.AddItemToList((int)id);
        AllShoppingItems.Remove(AllShoppingItems.First(m => m.ShoppingItemID == id));
        await JsRuntime.InvokeVoidAsync("alert", "Item Added");

    }

    async Task DeleteItem(int id)
    {

        await ShoppingServices.RemoveShoppingItem((int)id);
        AllShoppingItems = await ShoppingServices.GetShoppingItemsAsync();
    }
}


<style>

    .strike {
        text-decoration: line-through;
        color: red;
    }
</style>