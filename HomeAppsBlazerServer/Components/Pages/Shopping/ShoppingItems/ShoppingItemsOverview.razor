@page "/Shoppingitems"
@page "/Shoppingitems/{showallitems:bool}"


@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory
@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Shopping
@using HomeAppsBlazerServer.Servcies;
@using HomeAppsBlazerServer.Servcies.Shopping

@*Endalbes it*@
@rendermode InteractiveServer

@* jackes up the view of the table *@
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@


@* Loads as it as it download it. *@
@attribute [StreamRendering]

@inject IShoppingServices ShoppingServices

@inject NavigationManager NavigationManger
@inject IJSRuntime JsRuntime

@layout HomeAppsBlazerServer.Components.Layout.Shopping.ShoppingLayout




<link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.0/css/jquery.dataTables.css">


<script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.1.min.js"></script>
<script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.0/jquery.dataTables.min.js"></script>




<PageTitle>Shopping Items</PageTitle>

<PriceHistoryOverview @ref="popupRef" />

<div class="shopping-list-container">
   

    <div class="card mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            @if (_showallitems == false)
            {
                <h3 @onclick="@(() => GetShoppingItems(@_showallitems))" class="mb-0">All Items</h3>
            }
            else
            {
                    <h3 @onclick="@(() => GetShoppingItems(@_showallitems))" class="mb-0">Non-List Items</h3>
            }
  
        </div>

        <div class="card-body">
            <div class="d-flex flex-wrap gap-2 mb-4">
                <button class="btn btn-primary" @onclick="@(() => AddItem())">
                    <i class="bi bi-plus-circle"></i> Add New Item
                </button>
                <button class="btn btn-outline-primary" @onclick="@(() => AddListItem())">
                    <i class="bi bi-list-check"></i> Add Item To List
                </button>
            </div>

            @if (AllShoppingItems is null)
            {
                <div class="alert alert-info">
                    <div class="d-flex align-items-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span>Loading shopping items...</span>
                    </div>
                </div>
            }
            else if (AllShoppingItems.Count.Equals(0))
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    No items found in the list.
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table id="shoppingitems" class="table table-hover table-striped">
                        <thead class="table-light">
                            <tr>
                                <th>Item Details</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in AllShoppingItems)
                            {
                                <tr id="@item.ShoppingItemID">
                                    <td>
                                        <div class="d-flex flex-wrap align-items-center">
                                            <span class="fw-bold link-primary me-2" style="cursor: pointer" @onclick="@(() => AddItemToList(item.ShoppingItemID))">
                                                @item.ItemName
                                            </span>

                                            @if (item.StoreName is not null)
                                            {
                                                <span class="badge bg-light text-dark me-2">
                                                    <i class="bi bi-shop me-1"></i>@item.StoreName
                                                </span>
                                            }

                                            @if (item.LastPrice > 0)
                                            {
                                                <span class="badge bg-success me-2" style="cursor: pointer" @onclick="@(() => ShowHistory(item.ShoppingItemID))">
                                                    <i class="bi bi-currency-dollar me-1"></i>@item.LastPrice
                                                </span>
                                            }

                                            <div class="preferences-group ms-2">
                                                @if (item.ElliottDontLike == true)
                                                {
                                                    <span class="badge bg-danger me-1" title="Elliott doesn't like this">
                                                        <i class="bi bi-x-circle me-1"></i>Elliott
                                                    </span>
                                                }

                                                @if (item.FreddyDontLike == true)
                                                {
                                                    <span class="badge bg-danger me-1" title="Freddy doesn't like this">
                                                        <i class="bi bi-x-circle me-1"></i>Freddy
                                                    </span>
                                                }

                                                @if (item.KidsDontLike == true)
                                                {
                                                    <span class="badge bg-danger me-1" title="Kids don't like this">
                                                        <i class="bi bi-x-circle me-1"></i>Kids
                                                    </span>
                                                }
                                            </div>

                                            @if (item.GotItemDate.HasValue)
                                            {
                                                <span class="badge bg-info text-dark ms-auto">
                                                    <i class="bi bi-calendar-check me-1"></i>@item.GotItemDate.Value.ToShortDateString()
                                                </span>
                                            }
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="@(() => EditItem(item.ShoppingItemID))">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="@(() => DeleteItem(item.ShoppingItemID))">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between align-items-center">
                <span class="text-muted">Total Items: @(AllShoppingItems?.Count ?? 0)</span>
                <button class="btn btn-primary" @onclick="AddItem">
                    <i class="bi bi-plus-circle"></i> Add Item
                </button>
            </div>
        </div>
    </div>
    
</div>



<!-- Add these styles to your component or stylesheet -->
<style>
    .shopping-list-container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .preferences-group {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
    }

    @@media (max-width: 768px) {
        .table-responsive {
            margin: 0 -1rem;
        }

        .btn-group-sm .btn {
            padding: 0.25rem 0.5rem;
        }
    }

</style>

<!-- Add Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">



@code {

    private PriceHistoryOverview popupRef;

    List<ShoppingDetailItem> AllShoppingItems;

    private bool _showallitems = false;

    [Parameter]
    public bool showallitems { get; set; } = false;

    // Fix 1: Change the method call to handle errors and be asynchronous
    private async Task ShowHistory(int id)
    {
        try
        {
            List<PriceHistory> itemPriceHistory = await ShoppingServices.GetPriceHisotry(id);
            if (itemPriceHistory != null && popupRef != null)
            {
                popupRef.Show(itemPriceHistory);
            }
            else
            {
                Console.WriteLine("Either price history or popup reference is null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing history: {ex.Message}");
        }
    }


    protected override async Task OnInitializedAsync()
    {

        await GetShoppingItems(_showallitems);

    }

    private void NeedList()
    {
        NavigationManger.NavigateTo($"ShoppingList");
    }

    async Task GetShoppingItems(bool showallitems = false)
    {
        AllShoppingItems = await ShoppingServices.GetShoppingItemsAsync(_showallitems);

        _showallitems = !showallitems;
    }

    void EditItem(int id)
    {
        NavigationManger.NavigateTo($"edit-item/{id}");
    }



    void AddItem()
    {
        NavigationManger.NavigateTo($"edit-item/");
    }

    void AddListItem()
    {
        NavigationManger.NavigateTo($"CreateEditListItem/");
    }

    async Task AddItemToList(int id)
    {
        await ShoppingServices.AddItemToList((int)id);
        AllShoppingItems.Remove(AllShoppingItems.First(m => m.ShoppingItemID == id));
       
    }

    async Task DeleteItem(int id)
    {
        await ShoppingServices.RemoveShoppingItem((int)id);
        AllShoppingItems = await ShoppingServices.GetShoppingItemsAsync();
    }
}

