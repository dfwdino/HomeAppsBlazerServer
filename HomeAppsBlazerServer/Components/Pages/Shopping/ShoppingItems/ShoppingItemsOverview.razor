@page "/Shoppingitems"
@page "/Shoppingitems/{showallitems:bool}"
@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory

@using HomeAppsBlazerServer.Components.Pages.Shopping.PriceHistory
@using HomeAppsBlazerServer.Models

@using HomeAppsBlazerServer.Servcies;
@using HomeAppsBlazerServer.Servcies.Shopping

@*Endalbes it*@
@* @rendermode InteractiveServer *@

@* jackes up the view of the table *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))


@* Loads as it as it download it. *@
@attribute [StreamRendering]

@inject IShoppingServices ShoppingServices

@inject NavigationManager NavigationManger
@inject IJSRuntime JsRuntime

@layout HomeAppsBlazerServer.Components.Layout.Shopping.ShoppingLayout




@* <link rel="stylesheet" type="text/css" href="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.0/css/jquery.dataTables.css">


<script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.7.1.min.js"></script>
<script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.0/jquery.dataTables.min.js"></script>

 *@
@if (_showallitems == false)
{
    <PageTitle>Shopping Items</PageTitle>
     <h3>Showing All Items</h3>

    
    <span class="link-primary" @onclick="@(() => GetShoppingItems(@_showallitems))">Show Not on the List</span>
}
else
{
    <PageTitle>Shopping Items</PageTitle>
    <h3>Showing Non-List Items</h3>
    <span class="link-primary" @onclick="@(() => GetShoppingItems(@_showallitems))">Show All</span>

   
}

@if (AllShoppingItems is null)
{
    <p><em>Loadding shopping items....</em></p>
}
else if (AllShoppingItems.Count.Equals(0))
{
    <p><em>Did not find any items</em></p>
}
else
{

    <div style="padding-bottom:10px" />



    <table id="shoppingitems" class="table">
        <thead>
        <th>Item</th>
        <th></th>
        </thead>
        <tbody>
            @foreach (var item in AllShoppingItems)
            {
                <tr id="@item.ShoppingItemID">
                    <td>
                        <span class="link-primary" @onclick="@(() => EditItem(item.ShoppingItemID))">@item.ItemName </span> -
                        <span class="link-primary" @onclick="@(() => AddItemToList(item.ShoppingItemID))" style="padding-right:10px"> Need</span>

                        @if (item.StoreName is not null)
                        {
                            <span style="padding-right:5px">- @item.StoreName</span>
                        }

                        @if (item.LastPrice > 0)
                        {
                            <span style="padding-right:5px">- $@item.LastPrice </span>
                        }

                        @if (item.ElliottDontLike == true)
                        {
                            <span class='strike'>Elliott</span>
                        }
                        @if (item.FreddyDontLike == true)
                        {
                            <span class='strike'>Freddy</span>
                        }
                        @if (item.KidsDontLike == true)
                        {
                            <span class='strike'>Kids</span>
                        }

                        @if (item.GotItemDate.HasValue)
                        {
                            <span style="padding-right:5px">- @item.GotItemDate.Value.ToShortDateString() </span>
                        }
                  
                    </td>
                    <td>
                        @* <button class="btn btn-primary" @onclick="@(() => EditItem(item.ShoppingItemID))">Edit Item</button> *@
                        <button class="btn btn-primary" @onclick="@(() => DeleteItem(item.ShoppingItemID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="AddItem">Add Item</button>

    <PriceHistoryOverview @ref="popupRef" />

}




@code {

    private PriceHistoryOverview popupRef;

    List<ShoppingDetailItem> AllShoppingItems;

    private bool _showallitems = false;

    [Parameter]
    public bool showallitems { get; set; } = false;

    private void ShowHistory(int id)
    {
        List<PriceHistory> ItemPriceHistory = ShoppingServices.GetPriceHisotry(id).Result;

        popupRef.Show(ItemPriceHistory);
    }


    protected override async Task OnInitializedAsync()
    {

        await GetShoppingItems(_showallitems);

    }


    async Task GetShoppingItems(bool showallitems = false)
    {
        AllShoppingItems = await ShoppingServices.GetShoppingItemsAsync(_showallitems);

        _showallitems = !showallitems;
    }

    void EditItem(int id)
    {
        NavigationManger.NavigateTo($"edit-item/{id}");
    }



    void AddItem()
    {
        NavigationManger.NavigateTo($"edit-item/");
    }

    async Task AddItemToList(int id)
    {
        await ShoppingServices.AddItemToList((int)id);
        AllShoppingItems.Remove(AllShoppingItems.First(m => m.ShoppingItemID == id));
        //await JsRuntime.InvokeVoidAsync("alert", "Item Added");

    }

    async Task DeleteItem(int id)
    {

        await ShoppingServices.RemoveShoppingItem((int)id);
        AllShoppingItems = await ShoppingServices.GetShoppingItemsAsync();
    }
}


<style>

    .strike {
        text-decoration: line-through;
        color: red;
    }
</style>

<script>
    //Not working with sort.. it goes back to only show non-list items.
    // $(document).ready(function () {
    //     $('#shoppingitems').DataTable();
    // });

    

</script>