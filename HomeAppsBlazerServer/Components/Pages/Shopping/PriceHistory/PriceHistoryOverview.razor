@page "/pricehistory"
@page "/pricehistoryedit-item/{Id:int}"

@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Servcies
@using Microsoft.AspNetCore.Mvc

@inject IShoppingServices ShoppingServices
@inject NavigationManager NavigationManger

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.ShoppingLayout

@if (Id is null)
{
    <h3>Add Item</h3>
    <div style="padding-bottom:10px" />
}
else
{
    <h3>Update @priceHistory.First().ItemID item</h3>
}

@* <EditForm Model="priceHistory" OnSubmit="HandleSubmit" >

    <table class="table">

    </table>


</EditForm> *@


@{
    var showClass = IsVisible ? "d-block" : "d-none";
}


@if(priceHistory is not null)
{
<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            @foreach (var itemprice in priceHistory)
            {
                <div>@itemprice.PriceDate.ToShortDateString() - @itemprice.Amount - @itemprice.StoreID </div>
            }
        </div>
    </div>
    </div>
}






@code {
    [Parameter]
    public int? Id { get; set; }

    public List<PriceHistory> priceHistory { get; set; }


    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public void Show(List<PriceHistory> priceHistories)
    {
        // HeaderText = headerText;
        // BodyText = bodyText;
         IsVisible = true;

        priceHistory = priceHistories;

        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var PriceHistory = await ShoppingServices.GetPriceHisotry((int)(Id));

            if (PriceHistory is not null)
            {
                priceHistory = PriceHistory;
            }
        }

    }






    [HttpPost]
    //not working
    async Task Deleteitems()
    {
        //delete
        await ShoppingServices.RemoveShoppingItem((int)Id);

        //NavigationManger.NavigateTo($"/Shoppingitemss/");
    }

    async Task HandleSubmit()
    {

        //add
        //await ShoppingServices.AddPriceToHistry(PriceHistory);
        //NavigationManger.NavigateTo($"/Shoppingitemss/");



    }

}
