@page "/List-Location"

@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore
@using HomeAppsBlazerServer.Servcies.Chore

@inject ILocationChoresServices LocationChoresServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer
@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout

<h3>All Locations</h3>
<div class="padding-bottom"></div>

@if (Locations is null || Locations.Count == 0)
{
    <p><em>@(Locations is null ? "Loading location items..." : "What happened to the locations?")</em></p>
}
else
{
    @foreach (var location in Locations)
    {
        <div class="row">
            <div class="col-lg-1">
                <label for="itemsname">Location:</label>
            </div>
            <div class="col-lg-2">
                <div id="place" class="link-primary" @onclick="@(() => EditLocation(location.ChoreLocationId))">
                    @location.PlaceName
                </div>
            </div>
            <div class="col-lg-2">
                <button class="btn btn-primary" @onclick="@(() => DeleteItems(location))">Delete</button>
            </div>
        </div>
    }
}

@code {
    public List<LocationModel> Locations { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Locations = await LocationChoresServices.GetLocationsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching locations: {ex.Message}");
        }
    }

    void EditLocation(int id)
    {
        NavigationManager.NavigateTo($"/Location-Add-Update/{id}");
    }

    void DeleteItems(LocationModel locationModel)
    {
        if (locationModel != null)
        {
            try
            {
                LocationChoresServices.DeleteLocationAsync(locationModel);
                Locations.Remove(locationModel);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting location: {ex.Message}");
            }
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("KidsChore/");
    }
}
