@page "/List-Chore"

@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore

@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Chore

@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations

@inject IChoresChoresServices choresChoresServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout




<h3>List Chore</h3>
<div style="padding-bottom:30px" />

@if (Chores is null)
{
    <p><em>Loadding chore items....</em></p>
}
else if (Chores.Count.Equals(0))
{
    <p><em>What happen to the chore?</em></p>
}
else
{
    <div class="container">
        <div class="row  border-bottom py-2">

            <div class="col-md-2" style="font-weight:bold">
                <label for="itemsname">Chore Name:</label>
            </div>

            <div class="col-md-2" style="font-weight:bold">
                <label for="itemsname">Amount</label>
            </div>
        </div>
        @foreach (var chore in Chores){
            <div class="row  border-bottom py-2">

                <div class="col-md-2">
                    <div id="kidname" @onclick="@(() => EditStore(chore.ChoreID))"> <span class="link-primary"> @chore.ChoreName</span> </div>
                </div>

                @if (chore.Amount > 0)
                {
                    <div class="col-md-2">
                        <div id="amount">$@chore.Amount </div>
                </div>}
            </div>


        <div style="padding-top:20px" />


    }
    </div>
}

@code {


    public List<ChoresModel> Chores { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {

        Chores = await choresChoresServices.GetChores();

    }

    void EditStore(int id)
    {
        NavigationManager.NavigateTo($"/Add-Update-Chore/{id}");
    }

}


<style>
    label:{
        font-weight:bold;
    }         
</style>