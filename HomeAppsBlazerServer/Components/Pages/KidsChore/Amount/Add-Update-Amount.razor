@page "/Add-Update-Amount"
@page "/Add-Update-Amount/{Id:int}"

@using HomeAppsBlazerServer.Components.Extensions
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore
@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Chore
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations

@inject IChoresChoresServices choresChoresServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout

@if (Id is null)
{
    <h3>Add Amount</h3>
    <div style="padding-bottom:10px" />
}
else
{
    <h3>Update @choreAmountModel.ChoreName</h3>
}

<EditForm Model="choreAmountModel" OnSubmit="HandleSubmit">
    <div class="container shadow rounded p-4 my-4 bg-white">
        <h4 class="text-primary mb-4">@(Id is null ? "Add New Item" : "Edit Item")</h4>

        <div class="row mb-3 align-items-center">
            <div class="col-md-3">
                <label for="chorename" class="form-label text-secondary fw-medium">Item Name</label>
            </div>
            <div class="col-md-9">
                @if (Id is null)
                {
                    <BlazorBootstrap.AutoComplete @bind-Value="ChoreName"
                                                  TItem="ChoresModel"
                                                  DataProvider="CustomersDataProvider"
                                                  PropertyName="ChoreName"
                                                  Placeholder="Search for an item..."
                                                  OnChanged="(ChoresModel item) => OnAutoCompleteChanged(item)"
                                                  class="form-control form-control-lg rounded-pill shadow-sm" />
                }
                else
                {
                    <div class="form-control-plaintext fw-medium">@choreAmountModel.ChoreName</div>
                }
            </div>
        </div>

        <div class="row mb-3 align-items-center">
            <div class="col-md-3">
                <label for="choreamount" class="form-label text-secondary fw-medium">Amount</label>
            </div>
            <div class="col-md-9">
                <InputNumber id="choreamount" @bind-Value="@choreAmountModel.Amount"
                             class="form-control form-control-lg rounded-pill shadow-sm" />
            </div>
        </div>

        <div class="row mb-4 align-items-center">
            <div class="col-md-3">
                <label for="choredelete" class="form-label text-secondary fw-medium">Mark as Deleted</label>
            </div>
            <div class="col-md-9">
                <div class="form-check form-switch">
                    <InputCheckbox id="choredelete" @bind-Value="@choreAmountModel.IsDeleted"
                                   class="form-check-input" />
                </div>
            </div>
        </div>

        <div class="row justify-content-end mt-4">
            <div class="col-auto">
                <button type="button" class="btn btn-outline-secondary rounded-pill px-4 me-2" @onclick="@(() => Cancel())">
                    <i class="bi bi-x-circle me-1"></i> Cancel
                </button>
            </div>
            <div class="col-auto">
                <button type="submit" class="btn btn-primary rounded-pill px-4">
                    <i class="bi bi-check-circle me-1"></i> Save Changes
                </button>
            </div>

        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    public ChoreAmountDetailModel choreAmountModel { get; set; } = new();
    public ChoresModel choresModel { get; set; } = new();
    public string ChoreName { get; set; } = string.Empty;


    private async Task<AutoCompleteDataProviderResult<ChoresModel>>
            CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<ChoresModel> request)
    {
        var customers = await choresChoresServices.GetChoresFilter(request.Filter.Value); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<ChoresModel>
            { Data = customers, TotalCount = customers.Count() });

    }

    private void OnAutoCompleteChanged(ChoresModel customer)
    {
        choreAmountModel.ChoreID = customer.ChoreID;
        //choreAmountModel.Amount = customer.Amount;

        Console.WriteLine($"'{customer?.ChoreName}' selected.");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var AChore = await choresChoresServices.GetChoreAmount((int)Id);

            if (AChore is not null)
            {
                choreAmountModel =  new ChoreAmountDetailModel() { ID = AChore.ID, Amount = AChore.Amount, ChoreName = AChore.ChoreName } ;
                ChoreName = AChore.ChoreName;
                choresModel.ChoreName = AChore.ChoreName;
                choresModel.ChoreID = AChore.ChoreID;
              
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (choreAmountModel is null)
        {
            return;
        }
        else if (Id is not null) // update
        {
            choresChoresServices.UpdateChoreAmount(choreAmountModel);
            NavigationManager.NavigateTo("List-Amount");
        }
        else // add
        {
            choresChoresServices.AddChoreAmount(choreAmountModel);
            choreAmountModel = new ChoreAmountDetailModel();
            NavigationManager.NavigateTo("List-Amount");
        }
    }

    private async Task DeleteItems()
    {
        if (choreAmountModel is not null)
        {
            choreAmountModel.IsDeleted = true;
            //await choresChoresServices.UpdateChoreAmount(choreAmountModel);
            NavigationManager.NavigateTo("List-Amount");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("List-Amount");
    }
}
