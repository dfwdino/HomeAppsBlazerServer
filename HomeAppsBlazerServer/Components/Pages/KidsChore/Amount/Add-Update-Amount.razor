@page "/Add-Update-Amount"
@page "/Add-Update-Amount/{Id:int}"

@using HomeAppsBlazerServer.Components.Extensions
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore
@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Chore
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations

@inject IChoresChoresServices choresChoresServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout

@if (Id is null)
{
    <h3>Add Amount</h3>
    <div style="padding-bottom:10px" />
}
else
{
    <h3>Update @choreAmountModel.ChoreName</h3>
}

<EditForm Model="choreAmountModel" OnSubmit="HandleSubmit">

    <div class="container">
        <div class="row border-bottom py-2 fw-bold">

            <div class="row">
                <div class="col-2">
                    <label for="chorename" class="form-label">Item Name:</label>
                </div>
                <div class="col-9">


                    @if (Id is null)
                    {

                        <BlazorBootstrap.AutoComplete @bind-Value="ChoreName"
                        TItem="ChoresModel"
                        DataProvider="CustomersDataProvider"
                        PropertyName="ChoreName"
                        Placeholder="Search for an item..."
                        OnChanged="(ChoresModel item) => OnAutoCompleteChanged(item)"
                        class="form-control" />
                    }
                    else
                    {
                        <label>@choreAmountModel.ChoreName</label>
                    }



                </div>
            </div>

        </div>

        <div class="row border-bottom py-2 fw-bold">
            <div class="col-2">
                <label for="choreid">Amount ID:</label>
            </div>
            <div class="col-9">
                <InputNumber id="choreamount" @bind-Value="@choreAmountModel.Amount" />
            </div>
        </div>

        <div class="row">
            <div class="col-lg-1" style="padding-bottom:20px">
                <button type="button" class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
            </div>
            <div class="col-lg-1" style="padding-bottom:20px">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>

            @*  @if (Id is not null)
            {
                <div class="col-lg-1">
                    <button type="button" class="btn btn-primary" @onclick="@(() => Deleteitems())">Delete</button>
        </div>} *@

        </div>

    </div>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    public ChoreAmountDetailModel choreAmountModel { get; set; } = new();
    public ChoresModel choresModel { get; set; } = new();
    public string ChoreName { get; set; } = string.Empty;


    private async Task<AutoCompleteDataProviderResult<ChoresModel>>
            CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<ChoresModel> request)
    {
        var customers = await choresChoresServices.GetChoresFilter(request.Filter.Value); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<ChoresModel>
            { Data = customers, TotalCount = customers.Count() });

    }

    private void OnAutoCompleteChanged(ChoresModel customer)
    {
        choreAmountModel.ChoreID = customer.ChoreID;
        //choreAmountModel.Amount = customer.Amount;

        Console.WriteLine($"'{customer?.ChoreName}' selected.");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var AChore = await choresChoresServices.GetChoreAmount((int)Id);

            if (AChore is not null)
            {
                choreAmountModel =  new ChoreAmountDetailModel() { ID = AChore.ID, Amount = AChore.Amount, ChoreName = AChore.ChoreName } ;
                ChoreName = AChore.ChoreName;
                choresModel.ChoreName = AChore.ChoreName;
                choresModel.ChoreID = AChore.ChoreID;
              
            }
        }
    }

    private async Task HandleSubmit()
    {
        if (choreAmountModel is null)
        {
            return;
        }
        else if (Id is not null) // update
        {
            choresChoresServices.UpdateChoreAmount(choreAmountModel);
            NavigationManager.NavigateTo("List-Chore");
        }
        else // add
        {
            choresChoresServices.AddChoreAmount(choreAmountModel);
            choreAmountModel = new ChoreAmountDetailModel();
            NavigationManager.NavigateTo("List-Chore");
        }
    }

    private async Task DeleteItems()
    {
        if (choreAmountModel is not null)
        {
            choreAmountModel.IsDeleted = true;
            //await choresChoresServices.UpdateChoreAmount(choreAmountModel);
            NavigationManager.NavigateTo("List-Chore");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("List-Chore");
    }
}
