@page "/List-Kids"

@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore

@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Chore

@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations

@inject IKidsChorseKidsServices kidsChorseKidsServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout




<h3>Add Kid</h3>
<div style="padding-bottom:10px" />

@if (Kids is null)
{
    <p><em>Loadding kids items....</em></p>
}
else if (Kids.Count.Equals(0))
{
    <p><em>What happen to the kids?</em></p>
}
else
{

    @foreach (var kid in Kids)
    {

        <div class="row bordered-row">

            <div class="col-lg-3 ">
                <label style="font-weight:200;" for="itemsname">Kid Name:</label>
                <span style="padding-right:20px" id="kidname" @onclick="@(() => EditStore(kid.IDKidsName))"> @kid.KidName </span>
                    <button class="btn btn-primary" @onclick="@(() => Deleteitems())">Delete</button>
            </div>
            
        </div>

        <div style="padding-top:20px" />


    }}

@code {

    public List<KidsNameModel> Kids { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {

        Kids = await kidsChorseKidsServices.GetKids();

    }



    async Task Deleteitems()
    {

    }

    void EditStore(int id)
    {
        NavigationManager.NavigateTo($"/Kid-Add-Update/{id}");
    }

    async Task Cancel()
    {

        NavigationManager.NavigateTo($"KidsChore/");
    }




}

<style>
    .bordered-row {
        border: 1px solid black;
        border-radius: 5px; /* Optional: Adds rounded corners */
        padding: 10px; /* Optional: Adds some inner spacing */
        margin-bottom: 10px; /* Optional: Adds spacing between rows */
    }
</style>
