@page "/List-Chore-Items"
@page "/List-Chore-Items/{Id:int}"


@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore

@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Chore

@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations

@inject ChoresListItemChoresServices choresListItemChoresServices
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout




<h3>List Chore</h3>
<div style="margin-bottom:10px" />

@if (Chores is null)
{
    <p><em>Loadding chore items....</em></p>
}
else if (Chores.Count.Equals(0))
{
    <p><em>What happen to the chore?</em></p>
}
else
{
    <div class="container">



        <div class="row border-bottom py-2 fw-bold text-center">

            <div class="col-lg-2">
                <div>Chore </div>
            </div>
            <div class="col-lg-1">
                <div> Kid </div>
            </div>
            <div class="col-lg-1">
                <div>Amount</div>
            </div>

            <div class="col-lg-1">
                <div>Start Date</div>
            </div>

            <div class="col-lg-2">
                <div>Done Date</div>
            </div>
        </div>

        @foreach (var chore in Chores)
        {
            <div class="row border text-center" style="padding-top:20px;padding-bottom:20px">

                <div class="col-lg-2 border-start border-end">
                    <div id="kchorename" @onclick="@(() => Edit(chore.ChoreHistoryID))"> <span class="link-primary"> @chore.ChoreName</span> </div>
                </div>

                <div class="col-lg-1 border-start border-end">
                    <div id="kidname" @onclick="@(() => GetOnlyByKidNmae(chore.KidsNameID))"> <span class="link-primary"> @chore.KidsName</span> </div>
                </div>

                <div class="col-lg-1 border-start border-end">
                    <div>@chore.Amount</div>
                </div>

                <div class="col-lg-1 border-start border-end">
                    <div id="startdate" @onclick="@(() => Edit(chore.ChoreHistoryID))"> <span class="link-primary"> @chore.StartDate</span> </div>
                </div>

                <div class="col-lg-2 border-start border-end">
                    @if (chore.DateDone.HasValue)
                    {
                        <div>@chore.DateDone.Value.ToShortDateString()</div>
                    }
                    else
                    {
                        <div id="done" @onclick="@(() => MakeAsDone(chore.ChoreHistoryID))">
                            <span class="link-primary">Done?</span>  <!--Really should have a finished or not done but done for the week.-->
                        </div>
                    }


                </div>
            </div>

        }
    </div>
}

@code {

    [Parameter]
    public int? Id { get; set; }

    public List<ChoreListDetailItemsModel> Chores { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id.HasValue)
        {
            Chores = await choresListItemChoresServices.GetChoreItems(Id);

        }
        else{
            Chores = await choresListItemChoresServices.GetChoreItems();


        }


    }

    void GetOnlyByKidNmae(int id)
    {
        if(Id.HasValue){
            NavigationManager.NavigateTo($"/List-Chore-Items/");}
        else
        {
            NavigationManager.NavigateTo($"/List-Chore-Items/{id}");
        }
    }

    void MakeAsDone(int id)
    {
        DateTime now = DateTime.Now;
        var asdf = Chores.Where(x => x.ChoreHistoryID == id).FirstOrDefault();

        asdf.DateDone = now;

        choresListItemChoresServices.MakeAsDone(id);

    }

    void Edit(int id)
    {
        NavigationManager.NavigateTo($"/Add-Update-Chore-List-Item/{id}");
    }

}
