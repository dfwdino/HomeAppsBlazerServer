@page "/Add-Update-Chore-List-Item"
@page "/Add-Update-Chore-List-Item/{Id:int}"

@using HomeAppsBlazerServer.Components.Extensions
@using HomeAppsBlazerServer.Models
@using HomeAppsBlazerServer.Models.Chore
@using HomeAppsBlazerServer.Servcies
@using HomeAppsBlazerServer.Servcies.Chore
@using Microsoft.AspNetCore.Mvc
@using System.ComponentModel.DataAnnotations
@using System.Collections.Generic

@inject IChoresChoresServices choresChoresServices
@inject ChoresListItemChoresServices ChoresListItemChoresServices
@inject IKidsChorseKidsServices kidsChorseKidsServices


@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@layout HomeAppsBlazerServer.Components.Layout.Chore.KidsChoreLayout



@if (Id is null)
{
    <h3>Add Chore</h3>
    <div style="padding-bottom:10px" />
}
else
{
    <h3>Update @choresModel.ChoreName</h3>
}
<div class="container">
    <EditForm Model="choresModel" OnValidSubmit="HandleSubmit" @onkeydown="HandleKeyDown">

        <div class="row">
            <div class="col-lg-2">
                <label for="itemsname">Chore Name:</label>
            </div>
            <div class="col-lg-2">
                <BlazorBootstrap.AutoComplete @bind-Value="ChoreName"
                TItem="ChoresModel"
                DataProvider="CustomersDataProvider"
                PropertyName="ChoreName"
                Placeholder="Search a ChoreName..."
                OnChanged="(ChoresModel choreitem) => OnAutoCompleteChanged(choreitem)"
                @onsubmit:preventDefault />
            </div>
        </div>

        <div class="row">
            <div class="col-lg-2">
                <label for="itemsname">Kids Name:</label>
            </div>
            <div class="col-lg-2">
                <BlazorBootstrap.AutoComplete @bind-Value="KidName"
                TItem="KidsNameModel"
                DataProvider="CustomersDataProvider"
                PropertyName="KidName"
                Placeholder="Search a Kids..."
                OnChanged="(KidsNameModel kids) => OnAutoCompleteChanged(kids)" />
            </div>
        </div>

        <div class="row">

            <div class="col-lg-2">
                <label for="itemsname">Amount:</label>
            </div>
            <div class="col-lg-2">
                <InputNumber id="amount" @bind-Value="ChoreList.Amount" class="form-control" />
            </div>
        </div>

        <div class="row">

            <div class="col-lg-2">
                <label for="itemsname">Start:</label>
            </div>
            <div class="col-lg-2">

                <InputDate id="needDate" @bind-Value="ChoreList.StartDate" class="form-control" />

            </div>
        </div>

        @if(Id is not null) {
            <div class="row">

                <div class="col-lg-2">
                    <label for="itemsname">Finished:</label>
                </div>
                <div class="col-lg-2">

                    <InputDate id="needDate" @bind-Value="ChoreList.DoneDate" class="form-control" />

                </div>
            </div>
        }


        <div class="row buttons">
            <div class="col-lg-1" style="padding-bottom:20px">
                <button type="button" class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
            </div>
            <div class="col-lg-1" style="padding-bottom:20px">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
            @if(Id is not null){
                <div class="col-lg-1">
                    <button type="button" class="btn btn-primary" @onclick="@(() => Deleteitems())">Delete</button>
                </div>
            }
        </div>


    </EditForm>
</div>

<style>
    .row{
    padding-bottom: 10px;
    }

    .buttons {
    padding-top: 20px;
    }
</style>

@code {

    [Parameter]
    public int? Id { get; set; }

    public ChoreListItemsModel ChoreList { get; set; } = new();

    public ChoresModel choresModel { get; set; } = new();

    public KidsNameModel Kid { get; set; } = new();

    public string ChoreName, KidName, pressedKey = string.Empty;

    bool isLoading = true;


    private async Task<AutoCompleteDataProviderResult<ChoresModel>>
                CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<ChoresModel> request)
    {
        var customers = await choresChoresServices.GetChores(); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<ChoresModel>
                { Data = customers, TotalCount = customers.Count() });
    }

    private async Task<AutoCompleteDataProviderResult<KidsNameModel>>
               CustomersDataProvider(BlazorBootstrap.AutoCompleteDataProviderRequest<KidsNameModel> request)
    {
        var kids = await kidsChorseKidsServices.GetKids(request.Filter.Value); // API call

        return await Task.FromResult(new AutoCompleteDataProviderResult<KidsNameModel>
            { Data = kids, TotalCount = kids.Count() });
    }


    private void OnAutoCompleteChanged(ChoresModel chore)
    {
        //if (customer != null)
        ChoreList.KidsChoreID = chore.ChoreID;

        ChoreList.Amount = chore.Amount == 0 ? null : chore.Amount;


        Console.WriteLine("Chore Item is {chore.ChoreID}");

    }

    private void OnAutoCompleteChanged(KidsNameModel kids)
    {
        if (kids != null)
            ChoreList.KidsNameID = kids.IDKidsName;
        //Console.WriteLine($"'{customer?.StoreName}' selected.");
    }



    protected override async Task OnParametersSetAsync()
    {
        //StateHasChanged();

        if (Id is not null)
        {
            var AChore = await ChoresListItemChoresServices.GetChoreItem((int)(Id));

            if (AChore is not null)
            {
                ChoreList = AChore;

                ///WTF BAD CODE... Need to fix this.
                choresModel = choresChoresServices.GetChores().Result.Where(mm => mm.ChoreID.Equals(ChoreList.KidsChoreID)).FirstOrDefault();
                ChoreName = choresModel.ChoreName;

                Kid = kidsChorseKidsServices.GetKids().Result.Where(mm => mm.IDKidsName.Equals(ChoreList.KidsNameID)).FirstOrDefault();
                KidName = Kid.KidName;

            }

        }
    }



    private void HandleKeyDown(KeyboardEventArgs e)
    {
        pressedKey = e.Key;
    }

    async Task HandleSubmit()
    {

        //Want to pass if they hit enter to select a itme or store.
        if (pressedKey.Equals("enter", StringComparison.OrdinalIgnoreCase))
        {
            pressedKey = string.Empty;
            return;
        }

        if (ChoreList is null)
        {
            return;
        }
        else if (Id is not null) //update
        {

            ChoresListItemChoresServices.UpdateChoreItem(ChoreList);
            NavigationManager.NavigateTo($"List-Chore-Items/");
        }
        else //add
        {
            //Chore.ChoreName = Chore.ChoreName.ToTileCase();
            ChoresListItemChoresServices.AddChoreItem(ChoreList);

            ChoreList = new();

            NavigationManager.NavigateTo($"List-Chore-Items/");
        }

    }


    async Task Deleteitems()
    {
        //delete
        ChoreList.IsDeleted = true;
        ChoresListItemChoresServices.UpdateChoreItem(ChoreList);

        NavigationManager.NavigateTo($"List-Chore-Items/");
    }   

    async Task Cancel()
    {
        // if (ChoreList is null || ChoreList.KidsChoreID == 0 || ChoreList.KidsNameID == 0)
        // {
        //     return;
        // }

        NavigationManager.NavigateTo($"List-Chore-Items/");
    }




}
